/// <reference types="node" />
import { OnGatewayConnection, OnGatewayDisconnect } from '@nestjs/websockets';
import { Socket, Server } from 'socket.io';
import { ContainersService } from 'src/containers/containers.service';
import { StatsService } from 'src/stats/stats.service';
import { DockerService } from 'src/docker/docker.service';
import { DockerHubService } from 'src/docker/docker-hub.service';
import { DockerImagesService } from 'src/docker-images/docker-images.service';
import { exec } from 'child_process';
import { HttpService } from '@nestjs/axios';
import { Job, Queue } from 'bull';
import { DockerHostsService } from 'src/docker-hosts/docker-hosts.service';
import { SiteDataService } from 'src/docker/site-data.service';
export declare class EventsGateway implements OnGatewayConnection, OnGatewayConnection, OnGatewayDisconnect {
    private readonly containerService;
    private readonly dockerImageService;
    private readonly statsService;
    private readonly dockerService;
    private readonly dockerHubService;
    private readonly http;
    private readonly dockerHostService;
    private readonly siteDataService;
    private readonly eventsQueue;
    containerSockets: {};
    containerLogSockets: {};
    containerMonitorSockets: {};
    connectedSockets: {
        [key: string]: any[];
    };
    exec: typeof exec.__promisify__;
    server: Server;
    private readonly logger;
    constructor(containerService: ContainersService, dockerImageService: DockerImagesService, statsService: StatsService, dockerService: DockerService, dockerHubService: DockerHubService, http: HttpService, dockerHostService: DockerHostsService, siteDataService: SiteDataService, eventsQueue: Queue);
    dockerReceiver(data: any): void;
    containerInspectRelay(data: any): Promise<void>;
    pingReceiver(data: any, client: Socket): Promise<void>;
    getContainers(data: any, client: Socket): Promise<any>;
    hostsList(data: any, client: Socket): Promise<void>;
    siteData(data: any, client: Socket): Promise<void>;
    dockerCommand(data: any, client: Socket): Promise<void>;
    dockerPullImage(data: any, client: Socket): Promise<{}>;
    dockerCreateImage(data: any, client: Socket): Promise<void>;
    dockerCreateVolume(data: any, client: Socket): Promise<void>;
    dockerCreateContainer(data: any, client: Socket): Promise<void>;
    dockerContainerLogs(data: any, client: Socket): Promise<void>;
    dockerContainerLogsClose(data: any, client: Socket): Promise<void>;
    cleanJobs(jobQueueId?: string): Promise<Job<any>[]>;
    dockerContainerMonitor(data: any, client: Socket): Promise<void>;
    dockerContainerMonitorClose(data: any, client: Socket): Promise<void>;
    dockerContainerMonitorRelay(data: any): Promise<number>;
    dockerAttachCommand(data: any, client: Socket): Promise<void>;
    stats(data: any, client: Socket): Promise<any>;
    identity(data: number): Promise<number>;
    openTerminal(data: any): Promise<number>;
    openFinderPath(data: any): Promise<number>;
    openVSCodePath(data: any): Promise<number>;
    tailLogs(data: any): Promise<number>;
    updateContainersList(containers: any): Promise<void>;
    updateImagesList(images: any): Promise<void>;
    updateVolumesList(volumes: any): Promise<void>;
    updateDockerUsage(dockerUsage: any): Promise<void>;
    handleConnection(client: any, req: Request): Promise<void>;
    handleDisconnect(client: any): void;
}
